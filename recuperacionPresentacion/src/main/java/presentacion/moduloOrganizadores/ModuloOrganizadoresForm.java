/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion.moduloOrganizadores;

import DTOs.OrganizadorDTO;
import control.CoordinadorAplicacion;
import control.CoordinadorNegocio;
import exception.NegocioException;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * Formulario para el módulo de organizadores. Permite listar, filtrar y
 * eliminar organizadores, así como acceder al formulario para crear nuevos
 * organizadores.
 *
 * @author Alejandra García 252444
 */
public class ModuloOrganizadoresForm extends javax.swing.JFrame {
    
    private final CoordinadorAplicacion coordinadorAplicacion;
    private final CoordinadorNegocio coordinadorNegocio;
    private List<OrganizadorDTO> listaOrganizadores;
    private DefaultTableModel modeloTabla;

    /**
     * Creates new form ModuloOrganizadoresForm
     */
    public ModuloOrganizadoresForm() {
        initComponents();
        this.coordinadorAplicacion = CoordinadorAplicacion.getInstancia();
        this.coordinadorNegocio = CoordinadorNegocio.getInstancia();

        // Configurar tabla
        configurarTabla();

        // Cargar datos iniciales
        cargarOrganizadores();

        // Configurar acción del combobox
        this.cbTipoOrganizador.addActionListener((e) -> filtrarOrganizadores());

        // Centrar formulario en pantalla
        this.setLocationRelativeTo(null);
    }
    
    /**
     * Configura la tabla de organizadores.
     */
    private void configurarTabla() {
        modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        // Definir columnas
        modeloTabla.addColumn("ID");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Correo");
        modeloTabla.addColumn("Tipo");
        modeloTabla.addColumn("Eventos");

        // Ocultar columna ID
        tblOrganizadores.setModel(modeloTabla);
        tblOrganizadores.getColumnModel().getColumn(0).setMinWidth(0);
        tblOrganizadores.getColumnModel().getColumn(0).setMaxWidth(0);
        tblOrganizadores.getColumnModel().getColumn(0).setWidth(0);
    }

    /**
     * Carga la lista de organizadores desde la capa de negocio.
     */
    private void cargarOrganizadores() {
        try {
            listaOrganizadores = coordinadorNegocio.consultarTodosOrganizadores();
            actualizarTabla(listaOrganizadores);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al cargar organizadores: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Actualiza la tabla con la lista de organizadores proporcionada.
     *
     * @param organizadores Lista de organizadores a mostrar
     */
    private void actualizarTabla(List<OrganizadorDTO> organizadores) {
        // Limpiar tabla
        modeloTabla.setRowCount(0);

        // Agregar filas
        for (OrganizadorDTO organizador : organizadores) {
            modeloTabla.addRow(new Object[]{
                organizador.getIdOrganizador(), 
                organizador.getNombre(),
                organizador.getCorreo(),
                organizador.getTipoOrganizador(),
                organizador.getTotalEventos()
            });
        }
    }

    /**
     * Filtra la lista de organizadores según el tipo seleccionado.
     */
    private void filtrarOrganizadores() {
        String tipoSeleccionado = cbTipoOrganizador.getSelectedItem().toString();

        try {
            if ("Todos".equals(tipoSeleccionado)) {
                listaOrganizadores = coordinadorNegocio.consultarTodosOrganizadores();
            } else {
                listaOrganizadores = coordinadorNegocio.consultarOrganizadoresPorTipo(tipoSeleccionado.toUpperCase());
            }

            actualizarTabla(listaOrganizadores);
        } catch (NegocioException ex) {
            JOptionPane.showMessageDialog(this,
                    "Error al filtrar organizadores: " + ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * Obtiene el ID del organizador seleccionado en la tabla.
     *
     * @return ID del organizador o null si no hay selección
     */
    private Long obtenerIdSeleccionado() {
        int filaSeleccionada = tblOrganizadores.getSelectedRow();
        if (filaSeleccionada == -1) {
            return null;
        }

        return (Long) modeloTabla.getValueAt(filaSeleccionada, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitulo = new javax.swing.JLabel();
        lblTipo = new javax.swing.JLabel();
        cbTipoOrganizador = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrganizadores = new javax.swing.JTable();
        btnNuevoOrganizador = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(217, 217, 217));

        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(0, 0, 0));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Módulo Organizadores");

        lblTipo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblTipo.setForeground(new java.awt.Color(0, 0, 0));
        lblTipo.setText("Tipo:");

        cbTipoOrganizador.setBackground(new java.awt.Color(255, 255, 255));
        cbTipoOrganizador.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        cbTipoOrganizador.setForeground(new java.awt.Color(0, 0, 0));
        cbTipoOrganizador.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos", "Organizador", "Ponente", "Responsable" }));

        tblOrganizadores.setBackground(new java.awt.Color(255, 255, 255));
        tblOrganizadores.setForeground(new java.awt.Color(0, 0, 0));
        tblOrganizadores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Correo", "Tipo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrganizadores.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(tblOrganizadores);

        btnNuevoOrganizador.setBackground(new java.awt.Color(0, 0, 0));
        btnNuevoOrganizador.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnNuevoOrganizador.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevoOrganizador.setText("Nuevo Organizador");
        btnNuevoOrganizador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoOrganizadorActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(0, 0, 0));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnVolver.setBackground(new java.awt.Color(0, 0, 0));
        btnVolver.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        btnVolver.setForeground(new java.awt.Color(255, 255, 255));
        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblTipo, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTipoOrganizador, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(143, 143, 143)
                                    .addComponent(btnNuevoOrganizador, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 881, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(221, 221, 221)
                        .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 572, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(81, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(lblTitulo)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipo)
                    .addComponent(cbTipoOrganizador, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNuevoOrganizador, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(61, 61, 61))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(76, 214, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoOrganizadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoOrganizadorActionPerformed
        coordinadorAplicacion.mostrarNuevoOrganizador();
        this.dispose();
    }//GEN-LAST:event_btnNuevoOrganizadorActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        Long idSeleccionado = obtenerIdSeleccionado();

        if (idSeleccionado == null) {
            JOptionPane.showMessageDialog(this,
                    "Debe seleccionar un organizador para eliminar",
                    "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(this,
                "¿Está seguro de eliminar este organizador?",
                "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirmacion == JOptionPane.YES_OPTION) {
            try {
                coordinadorNegocio.eliminarOrganizador(idSeleccionado);
                JOptionPane.showMessageDialog(this,
                        "Organizador eliminado correctamente",
                        "Éxito", JOptionPane.INFORMATION_MESSAGE);
                cargarOrganizadores(); // Recargar la lista
            } catch (NegocioException ex) {
                JOptionPane.showMessageDialog(this,
                        "Error al eliminar organizador: " + ex.getMessage(),
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        coordinadorAplicacion.mostrarMenuPrincipal();
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevoOrganizador;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cbTipoOrganizador;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTipo;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTable tblOrganizadores;
    // End of variables declaration//GEN-END:variables
}
